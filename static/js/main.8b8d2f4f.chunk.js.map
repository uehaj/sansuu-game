{"version":3,"sources":["components/NumPad.tsx","components/Results.tsx","gameState.tsx","components/GameMainPanel.tsx","components/App.tsx","index.tsx"],"names":["onKey","keyTop","gameState","setNumber","onChange","k","prevN","game","gameRounds","currentGameRound","lastRoundStarted","withStyles","numButton","margin","fontSize","textArea","inputArea","padding","_ref","classes","onSnackbarOk","message","_useState","useState","_useState2","Object","slicedToArray","number","react_default","a","createElement","Fragment","Snackbar_default","anchorOrigin","vertical","horizontal","open","Typography_default","variant","style","color","Button_default","onClick","Grid_default","container","spacing","item","xs","align","concat","length","question","Paper_default","justify","map","n","key","textAlign","className","styles","createStyles","theme","root","width","marginTop","unit","overflowX","table","minWidth","props","results","Table_default","TableHead_default","TableRow_default","TableCell_default","TableBody_default","Array","fill","_","i","component","scope","startTimeInString","finishTimeInString","Game","lhs","rhs","opeName","operation","classCallCheck","this","leftHandSide","rightHandSide","operationName","answer","generateGames","nRounds","Math","floor","random","button","_useGameState","arguments","undefined","gamePhase","setGameState","setPhase","newPhase","prevState","objectSpread","setCurrentRound","newCurrentRound","setPlayerName","playerName","setStartTimeInString","setFinishTimeInString","setLastRoundStarted","addResult","result","toConsumableArray","useGameState","gameStart","useCallback","now","Date","getTime","toLocaleString","handleAnswerd","elapsedTimeInMilliSec","correct","handleSnackBarOk","toString","gameReviewed","setTimeout","data-testid","components_NumPad","components_Results","flexGrow","grow","menuButton","marginLeft","marginRight","CssBaseline_default","AppBar_default","position","Toolbar_default","IconButton_default","aria-label","Menu_default","components_GameMainPanel","ReactDOM","render","App","document","getElementById"],"mappings":"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","file":"static/js/main.8b8d2f4f.chunk.js","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport green from '@material-ui/core/colors/green';\nimport amber from '@material-ui/core/colors/amber';\nimport InfoIcon from '@material-ui/icons/Info';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { Game, GameState } from '../gameState';\nimport classNames from 'classnames';\n\nconst styles = {\n  numButton: {\n    margin: '1rem',\n    fontSize: '2rem',\n  },\n  textArea: {\n    margin: '1rem',\n    fontSize: '2rem',\n  },\n  inputArea: {\n    margin: '1rem',\n    fontSize: '2rem',\n    padding: '0.5rem',\n  },\n};\n\ntype Props = {\n  classes: any;\n  onChange?: (game: Game, answer: number, lastRoundStarted: number) => void;\n  onSnackbarOk?: () => void;\n  gameState: GameState;\n  message?: string;\n};\n\nconst onKey = (\n  keyTop: any,\n  gameState: GameState,\n  setNumber: (z: number | ((y: number) => number)) => void,\n  onChange: Props['onChange']\n) => (k: any) => {\n  if (typeof keyTop === 'number') {\n    setNumber((prevN: number) => prevN * 10 + keyTop);\n  } else if (typeof keyTop === 'string') {\n    if (keyTop === 'CLR') {\n      setNumber(0);\n    } else if (onChange && keyTop === 'OK') {\n      setNumber(prevN => {\n        const game = gameState.gameRounds[gameState.currentGameRound];\n        if (gameState.lastRoundStarted) {\n          onChange(game, prevN, gameState.lastRoundStarted);\n        }\n        return prevN;\n      });\n    }\n  }\n};\n\nfunction NumPad({\n  classes,\n  gameState,\n  onChange,\n  onSnackbarOk,\n  message,\n}: Props) {\n  const [number, setNumber] = useState<number>(0);\n\n  const game = gameState.gameRounds[gameState.currentGameRound];\n  return (\n    <>\n      <Snackbar\n        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n        open={!!message}\n        message={\n          <>\n            <Typography variant={'h4'} style={{ color: 'white' }}>\n              {message}\n            </Typography>\n            <Typography>\n              <Button\n                onClick={() => {\n                  setNumber(0);\n                  if (onSnackbarOk) {\n                    onSnackbarOk();\n                  }\n                }}\n                variant={'contained'}>\n                <Typography variant={'h4'}>OK</Typography>\n              </Button>\n            </Typography>\n          </>\n        }\n      />\n      <Grid container spacing={32}>\n        <Grid item xs={12}>\n          <Typography variant={'h3'} align={'center'}>\n            <b>{`問題${gameState.currentGameRound + 1} `}</b>(\n            {gameState.currentGameRound + 1} / {gameState.gameRounds.length})\n          </Typography>\n        </Grid>\n      </Grid>\n      <Grid container spacing={32} style={{ padding: '1em' }}>\n        <Grid item xs={6}>\n          <Typography variant={'h4'}>{`${game.question}`}</Typography>\n        </Grid>\n        <Grid item xs={6}>\n          <Paper>\n            <Typography\n              variant={'h3'}\n              align={'right'}\n              style={{ padding: '0.2em' }}>\n              {number}\n            </Typography>\n          </Paper>\n        </Grid>\n      </Grid>\n      <Paper style={{ margin: '1em', padding: '1em' }}>\n        <Grid container justify=\"space-between\">\n          {[1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 'CLR', 'OK'].map(n => (\n            <Grid item xs={4} key={n} style={{ textAlign: 'center' }}>\n              <Button\n                variant={'extendedFab'}\n                className={classes.numButton}\n                onClick={onKey(n, gameState, setNumber, onChange)}>\n                {n}\n              </Button>\n            </Grid>\n          ))}\n        </Grid>\n      </Paper>\n    </>\n  );\n}\n\nexport default withStyles(styles)(NumPad);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, createStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport { GameState } from '../gameState';\n\nconst styles = createStyles((theme: any) => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing.unit * 3,\n    overflowX: 'auto',\n  },\n  table: {\n    minWidth: 700,\n  },\n}));\n\ntype Props = { classes: any; gameState: GameState };\n\nfunction Results(props: Props) {\n  const { classes, gameState } = props;\n  const { gameRounds, results } = gameState;\n\n  return (\n    <Paper className={classes.root}>\n      <Table className={classes.table}>\n        <TableHead>\n          <TableRow>\n            <TableCell>Dessert (100g serving)</TableCell>\n            <TableCell align=\"right\">Calories</TableCell>\n            <TableCell align=\"right\">Fat (g)</TableCell>\n            <TableCell align=\"right\">Carbs (g)</TableCell>\n            <TableCell align=\"right\">Protein (g)</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {Array(results.length)\n            .fill(0)\n            .map((_, i: number) => (\n              <TableRow key={i}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {gameState.startTimeInString}\n                </TableCell>\n                <TableCell component=\"th\" scope=\"row\">\n                  {gameState.finishTimeInString}\n                </TableCell>\n              </TableRow>\n            ))}\n        </TableBody>\n      </Table>\n    </Paper>\n  );\n}\n\nexport default withStyles(styles)(Results);\n","import React, { useState } from 'react';\n\ntype GamePhase =\n  | 'initial'\n  | 'splash'\n  | 'ready'\n  | 'running'\n  | 'answered'\n  | 'finished';\n\nexport class Game {\n  private leftHandSide: number;\n  private rightHandSide: number;\n  private operationName: string;\n  private operation: (lhs: number, rhs: number) => number;\n\n  public answer: number;\n  public question: string;\n\n  constructor(\n    lhs: number,\n    rhs: number,\n    opeName: string,\n    operation: (lhs: number, rhs: number) => number\n  ) {\n    this.leftHandSide = lhs;\n    this.rightHandSide = rhs;\n    this.operation = operation;\n    this.answer = this.operation(lhs, rhs);\n    this.operationName = opeName;\n    this.question = `「${lhs} ${this.operationName} ${rhs}」の答えは？`;\n  }\n}\n\nexport type Record = {\n  elapsedTimeInMilliSec: number;\n  correct: boolean;\n};\n\nexport type GameState = {\n  gamePhase: GamePhase;\n  currentGameRound: number;\n  gameRounds: Game[];\n  results: Record[];\n  message?: string;\n  playerName?: string;\n  startTimeInString?: string;\n  finishTimeInString?: string;\n  lastRoundStarted?: number;\n};\n\nfunction generateGames(nRounds: number): Game[] {\n  return Array(nRounds)\n    .fill(0)\n    .map(\n      (_, i) =>\n        new Game(\n          Math.floor(Math.random() * 99) + 1,\n          Math.floor(Math.random() * 99) + 1,\n          '＋',\n          (lhs: number, rhs: number) => lhs + rhs\n        )\n    );\n}\n\nexport function useGameState(nRounds = 5) {\n  const [gameState, setGameState] = useState<GameState>({\n    gamePhase: 'initial',\n    currentGameRound: 0,\n    gameRounds: generateGames(nRounds),\n    results: [] as Record[],\n    message: undefined,\n  });\n  return {\n    gameState,\n    setPhase: (newPhase: GamePhase, message?: string) => {\n      setGameState((prevState: GameState) => ({\n        ...prevState,\n        gamePhase: newPhase,\n        message,\n      }));\n    },\n    setCurrentRound: (newCurrentRound: number) => {\n      setGameState(prevState => ({\n        ...prevState,\n        currentGameRound: newCurrentRound,\n      }));\n    },\n    setPlayerName: (playerName: string) => {\n      setGameState(prevState => ({\n        ...prevState,\n        playerName,\n      }));\n    },\n    setStartTimeInString: (startTimeInString: string) => {\n      setGameState(prevState => ({\n        ...prevState,\n        startTimeInString,\n      }));\n    },\n    setFinishTimeInString: (finishTimeInString: string) => {\n      setGameState(prevState => ({\n        ...prevState,\n        finishTimeInString,\n      }));\n    },\n    setLastRoundStarted: (lastRoundStarted: number) => {\n      setGameState(prevState => ({\n        ...prevState,\n        lastRoundStarted,\n      }));\n    },\n    addResult: (result: Record) => {\n      setGameState(prevState => ({\n        ...prevState,\n        results: [...prevState.results, result],\n      }));\n    },\n  };\n}\n","import React, { useCallback } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\n\nimport NumPad from './NumPad';\nimport Results from './Results';\nimport { useGameState, Game } from '../gameState';\n\nconst styles = {\n  button: {\n    margin: '1rem',\n    fontSize: '2rem',\n  },\n};\n\ntype Props = {\n  classes: any;\n};\n\nfunction GameMainPanel({ classes }: Props) {\n  const {\n    gameState,\n    setPhase,\n    setCurrentRound,\n    setPlayerName,\n    setStartTimeInString,\n    setFinishTimeInString,\n    setLastRoundStarted,\n    addResult,\n  } = useGameState();\n\n  const gameStart = useCallback(() => {\n    setPhase('running');\n    const now = new Date();\n    setLastRoundStarted(now.getTime());\n    setStartTimeInString(now.toLocaleString());\n  }, []);\n\n  const handleAnswerd = (\n    game: Game,\n    answer: number,\n    lastRoundStarted: number\n  ) => {\n    if (game.answer === answer) {\n      setPhase('answered', `正解です`);\n    } else {\n      setPhase('answered', `${answer}は不正解です。正解は${game.answer}`);\n    }\n    addResult({\n      elapsedTimeInMilliSec: Date.now() - lastRoundStarted,\n      correct: game.answer === answer,\n    });\n  };\n\n  const handleSnackBarOk = () => {\n    setPhase('running');\n    if (gameState.currentGameRound === gameState.gameRounds.length - 1) {\n      setFinishTimeInString(new Date().toString());\n      setPhase('finished');\n    } else {\n      setCurrentRound(gameState.currentGameRound + 1);\n    }\n  };\n\n  const gameReviewed = useCallback(() => {\n    setPhase('initial');\n  }, []);\n\n  return (\n    <Grid container style={{ margin: '1em' }}>\n      <Grid item xs={1} />\n      {(gameState => {\n        if (gameState.gamePhase === 'initial') {\n          setPhase('splash');\n          return <div />;\n        } else if (gameState.gamePhase === 'splash') {\n          setTimeout(() => {\n            setPhase('ready');\n          }, 1000);\n          return (\n            <Grid container>\n              <Grid item xs={12}>\n                <Typography align={'center'} variant={'h1'}>\n                  算数ゲーム\n                </Typography>\n              </Grid>\n              <Grid item xs={12}>\n                <Typography align={'center'} variant={'h4'}>\n                  さんすうゲームがはじまります。\n                </Typography>\n              </Grid>\n            </Grid>\n          );\n        } else if (gameState.gamePhase === 'ready') {\n          return (\n            <Grid container>\n              <Grid item xs={10}>\n                <Button\n                  variant=\"contained\"\n                  className={classes.button}\n                  color={'secondary'}\n                  onClick={gameStart}\n                  data-testid=\"start\">\n                  START\n                </Button>\n              </Grid>\n            </Grid>\n          );\n        } else if (gameState.gamePhase === 'running') {\n          return (\n            <Grid item xs={10}>\n              <NumPad gameState={gameState} onChange={handleAnswerd} />\n            </Grid>\n          );\n        } else if (gameState.gamePhase === 'answered') {\n          return (\n            <Grid item xs={10}>\n              <NumPad\n                gameState={gameState}\n                message={gameState.message}\n                onSnackbarOk={handleSnackBarOk}\n              />\n            </Grid>\n          );\n        } else if (gameState.gamePhase === 'finished') {\n          return (\n            <Grid container>\n              <Grid item>\n                <Results gameState={gameState} />\n              </Grid>\n              <Grid item xs={10}>\n                <Button\n                  variant=\"contained\"\n                  className={classes.button}\n                  color={'secondary'}\n                  onClick={gameReviewed}\n                  data-testid=\"start\">\n                  OK\n                </Button>\n              </Grid>{' '}\n            </Grid>\n          );\n        } else {\n          return <div>Error</div>;\n        }\n      })(gameState)}\n    </Grid>\n  );\n}\n\nexport default withStyles(styles)(GameMainPanel);\n","import React, { useState, useCallback } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Grid from '@material-ui/core/Grid';\n\nimport GameMainPanel from './GameMainPanel';\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20,\n  },\n};\n\ntype Props = { classes: any };\n\nfunction ButtonAppBar({ classes }: Props) {\n  return (\n    <>\n      <CssBaseline />\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"Menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant={'h4'} color=\"inherit\">\n            さんすうゲーム\n          </Typography>\n        </Toolbar>\n      </AppBar>\n\n      <GameMainPanel />\n    </>\n  );\n}\n\nexport default withStyles(styles)(ButtonAppBar);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}