{"version":3,"sources":["components/AnsweredPanel.tsx","components/NumPad.tsx","components/Results.tsx","components/Header.tsx","components/Layout.tsx","hooks/useGameState.tsx","components/MainPanel.tsx","components/App.tsx","index.tsx"],"names":["styles","createStyles","withStyles","_ref","message","onOk","answerShowing","react_default","a","createElement","Snackbar_default","anchorOrigin","vertical","horizontal","open","Fragment","Typography_default","variant","style","color","Button_default","onClick","buttonWrapper","textAlign","button","margin","fontSize","genMessage","game","answer","concat","handleNumberPressed","keyTop","setNumber","useCallback","event","prevN","handleCLR","handleOK","setAnswer","onAnswered","classes","gameState","setPhase","_useState","useState","_useState2","Object","slicedToArray","number","_useState3","_useState4","ref","useRef","useEffect","current","focus","gameStateRef","gameRounds","currentGameRound","components_AnsweredPanel","length","Grid_default","container","spacing","item","xs","align","marginBottom","padding","sm","question","Paper_default","justify","map","n","key","className","buttonRef","theme","root","width","marginTop","unit","overflowX","table","minWidth","props","componentProps","gameLog","assign","Table_default","TableHead_default","TableRow_default","TableCell_default","TableBody_default","result","i","component","scope","Math","round","appBar","menuButton","marginLeft","marginRight","gameStateOperators","setGameLog","anchorEl","setAnchorEl","addCurrentRound","setPlayerName","setStartTimeInString","setFinishTimeInString","setLastRoundStarted","clear","addResult","AppBar_default","position","Toolbar_default","IconButton_default","currentTarget","icons_Menu_default","Menu_default","id","Boolean","onClose","MenuItem_default","localStorage","setItem","JSON","stringify","Layout","children","components_Header","Game","lhs","rhs","opeName","operation","classCallCheck","this","leftHandSide","rightHandSide","operationName","generateGames","nRounds","Array","fill","_","floor","random","log","arguments","undefined","gamePhase","results","setGameState","newPhase","prevState","objectSpread","playerName","startTimeInString","finishTimeInString","lastRoundStarted","toConsumableArray","useGameState","gameStart","now","Date","getTime","toLocaleString","handleAnswered","elapsedTimeInMilliSec","correct","toString","record","gameResult","reduce","acc","curr","console","recordOf","prevValue","nextValue","setTimeout","flexDirection","data-testid","components_NumPad","components_Results","CssBaseline_default","components_MainPanel","stringLog","getItem","parse","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.862c604f.chunk.js","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles, createStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nconst styles = createStyles({});\n\ntype Props = {\n  classes: any;\n  onOk: () => void;\n  message?: string;\n  answerShowing: boolean;\n};\n\nfunction AnsweredPanel({ message, onOk, answerShowing }: Props) {\n  return (\n    <Snackbar\n      anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n      open={answerShowing}\n      message={\n        <>\n          <Typography variant={'h4'} style={{ color: 'white' }}>\n            {message}\n          </Typography>\n          <Typography>\n            <Button\n              onClick={() => {\n                if (onOk) {\n                  onOk();\n                }\n              }}\n              variant={'contained'}>\n              <Typography variant={'h4'}>OK</Typography>\n            </Button>\n          </Typography>\n        </>\n      }\n    />\n  );\n}\n\nexport default withStyles(styles)(AnsweredPanel);\n","import React, { useState, useCallback, useRef, useEffect } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport { withStyles, createStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\n\nimport AnsweredPanel from '../components/AnsweredPanel';\nimport { Game, GameState, GamePhase } from '../hooks/useGameState';\n\nconst styles = createStyles({\n  buttonWrapper: {\n    textAlign: 'center',\n  },\n  button: {\n    margin: '0.5rem',\n    fontSize: '1.2rem',\n  },\n});\n\nfunction genMessage(game: Game, answer: number | null) {\n  if (answer === null) {\n    return '';\n  } else if (game.answer === answer) {\n    return `正解です`;\n  } else {\n    return `${answer}は不正解です。正解は${game.answer}`;\n  }\n}\n\ntype Props = {\n  classes: any;\n  setPhase: (newPhase: GamePhase) => void;\n  onAnswered: (answer: number) => void;\n  gameState: GameState;\n};\n\nconst handleNumberPressed = (\n  keyTop: number,\n  setNumber: (z: number | ((y: number) => number)) => void\n) =>\n  useCallback(\n    (event: any) => {\n      setNumber((prevN: number) => prevN * 10 + keyTop);\n    },\n    [keyTop, setNumber]\n  );\n\nconst handleCLR = (setNumber: (z: number | ((y: number) => number)) => void) =>\n  useCallback((event: any) => {\n    setNumber(0);\n  }, []);\n\nconst handleOK = (\n  setNumber: (z: number | ((y: number) => number)) => void,\n  setAnswer: (z: number) => void,\n  onAnswered: Props['onAnswered']\n) =>\n  useCallback((event: any) => {\n    setNumber(prevN => {\n      setAnswer(prevN);\n      onAnswered(prevN);\n      return prevN;\n    });\n  }, []);\n\nfunction NumPad({ classes, gameState, onAnswered, setPhase }: Props) {\n  const [number, setNumber] = useState<number>(0);\n  const [answer, setAnswer] = useState<number | null>(null);\n\n  // refを使ってボタンにフォーカスを取得させる\n  const ref = useRef();\n  useEffect(() => {\n    if (ref && ref.current) {\n      (ref.current as any).focus();\n    }\n  });\n\n  // gameStateをイベントハンドラとの間でシェアする。\n  const gameStateRef = useRef<GameState>(gameState);\n  gameStateRef.current = gameState;\n\n  const game = gameState.gameRounds[gameState.currentGameRound];\n  return (\n    <>\n      <AnsweredPanel\n        message={genMessage(game, answer)}\n        answerShowing={answer !== null}\n        onOk={() => {\n          setAnswer(null);\n          setNumber(0);\n          const gameState = gameStateRef.current;\n          if (gameState.currentGameRound === gameState.gameRounds.length - 1) {\n            setPhase('finished');\n          }\n        }}\n      />\n      <Grid container spacing={32}>\n        <Grid item xs={12}>\n          <Typography variant={'h4'} align={'center'}>\n            <b>{`問題${gameState.currentGameRound + 1} `}</b>/{' '}\n            {gameState.gameRounds.length}\n          </Typography>\n        </Grid>\n      </Grid>\n      <Grid\n        container\n        spacing={32}\n        style={{ marginBottom: '0.5rem', padding: '0.1fem' }}>\n        <Grid item xs={12} sm={6}>\n          <Typography variant={'h4'}>{`${game.question}`}</Typography>\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <Paper>\n            <Typography variant={'h3'} align={'right'}>\n              {number}\n            </Typography>\n          </Paper>\n        </Grid>\n      </Grid>\n      <Paper style={{ margin: '0.1em', padding: '0.1em' }}>\n        <Grid container justify=\"space-between\">\n          {[1, 2, 3, 4, 5, 6, 7, 8, 9, 0].map(n => (\n            <Grid item xs={4} key={n} style={{ textAlign: 'center' }}>\n              <Button\n                variant={'contained'}\n                className={classes.button}\n                onClick={handleNumberPressed(n, setNumber)}>\n                {n}\n              </Button>\n            </Grid>\n          ))}\n          <Grid item xs={4} className={classes.buttonWrapper}>\n            <Button\n              variant={'contained'}\n              className={classes.button}\n              onClick={handleCLR(setNumber)}>\n              CLR\n            </Button>\n          </Grid>\n          <Grid item xs={4} className={classes.buttonWrapper}>\n            <Button\n              variant={'contained'}\n              className={classes.button}\n              onClick={handleOK(setNumber, setAnswer, onAnswered)}\n              buttonRef={ref}>\n              OK\n            </Button>\n          </Grid>\n        </Grid>\n      </Paper>\n    </>\n  );\n}\n\nexport default withStyles(styles)(NumPad);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, createStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport { GameState } from '../hooks/useGameState';\n\nconst styles = createStyles((theme: any) => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing.unit * 3,\n    overflowX: 'auto',\n  },\n  table: {\n    minWidth: 700,\n  },\n}));\n\ntype Props = { classes: any; componentProps: any; gameLog: any };\n\nfunction Results(props: Props) {\n  const { classes, componentProps, gameLog } = props;\n\n  return (\n    <Paper className={classes.root} {...componentProps}>\n      <Table className={classes.table}>\n        <TableHead>\n          <TableRow>\n            <TableCell>日付</TableCell>\n            <TableCell>名前</TableCell>\n            <TableCell>正解</TableCell>\n            <TableCell>平均時間</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {gameLog.map((result: any, i: number) => (\n            <TableRow key={i}>\n              <TableCell component=\"th\" scope=\"row\">\n                {result[0]}\n              </TableCell>\n              <TableCell component=\"th\" scope=\"row\">\n                {result[1]}\n              </TableCell>\n              <TableCell component=\"th\" scope=\"row\">\n                {result[2]}\n              </TableCell>\n              <TableCell component=\"th\" scope=\"row\">\n                {Math.round(result[3] * 10) / 10}\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </Paper>\n  );\n}\n\nexport default withStyles(styles)(Results);\n","import React, { useState } from 'react';\n\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles, createStyles } from '@material-ui/core/styles';\n\nimport { useGameState, Game, GameState, Record } from '../hooks/useGameState';\n\nconst styles = createStyles({\n  appBar: {\n    marginBottom: '0.5rem',\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20,\n  },\n});\n\ntype Props = {\n  classes: any;\n  gameStateOperators: ReturnType<typeof useGameState>;\n  setGameLog: (arg: [][]) => void;\n};\n\nfunction Header({ classes, gameStateOperators, setGameLog }: Props) {\n  const [anchorEl, setAnchorEl] = useState(null);\n  const {\n    gameState,\n    setPhase,\n    addCurrentRound,\n    setPlayerName,\n    setStartTimeInString,\n    setFinishTimeInString,\n    setLastRoundStarted,\n    clear,\n    addResult,\n  } = gameStateOperators;\n\n  const handleClick = (event: any) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleSelectBreak = (event: any) => {\n    setAnchorEl(null);\n    setPhase('finished');\n  };\n\n  const handleSelectRecordClear = (event: any) => {\n    setAnchorEl(null);\n    localStorage.setItem('log', JSON.stringify([]));\n    setGameLog([]);\n    setPhase('finished');\n  };\n\n  const handleClose = (event: any) => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <>\n      <AppBar position=\"static\" className={classes.appBar}>\n        <Toolbar>\n          <IconButton\n            className={classes.menuButton}\n            color=\"inherit\"\n            onClick={handleClick}>\n            <MenuIcon />\n          </IconButton>\n          <Typography variant={'h4'} color=\"inherit\">\n            さんすうゲーム\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <div>\n        <Menu\n          id=\"simple-menu\"\n          anchorEl={anchorEl}\n          open={Boolean(anchorEl)}\n          onClose={handleClose}>\n          <MenuItem onClick={handleSelectBreak}>中止</MenuItem>\n          <MenuItem onClick={handleSelectRecordClear}>履歴を消去</MenuItem>\n        </Menu>\n      </div>\n    </>\n  );\n}\n\nexport default withStyles(styles)(Header);\n","import React, { useState, useCallback } from 'react';\n\nimport Header from './Header';\nimport { useGameState, Game, GameState, Record } from '../hooks/useGameState';\n\ntype Props = {\n  gameStateOperators: ReturnType<typeof useGameState>;\n  setGameLog: (arg: [][]) => void;\n  children: React.ReactNode;\n};\n\nexport default ({ gameStateOperators, children, setGameLog }: Props) => (\n  <>\n    <Header gameStateOperators={gameStateOperators} setGameLog={setGameLog} />\n    {children}\n  </>\n);\n","import React, { useState } from 'react';\n\nexport type GamePhase = 'initial' | 'splash' | 'ready' | 'running' | 'finished';\n\nexport class Game {\n  private leftHandSide: number;\n  private rightHandSide: number;\n  private operationName: string;\n  private operation: (lhs: number, rhs: number) => number;\n\n  public answer: number;\n  public question: string;\n\n  constructor(\n    lhs: number,\n    rhs: number,\n    opeName: string,\n    operation: (lhs: number, rhs: number) => number\n  ) {\n    this.leftHandSide = lhs;\n    this.rightHandSide = rhs;\n    this.operation = operation;\n    this.answer = this.operation(lhs, rhs);\n    this.operationName = opeName;\n    this.question = `「${lhs} ${this.operationName} ${rhs}」の答えは？`;\n  }\n}\n\nexport type Record = {\n  elapsedTimeInMilliSec: number;\n  correct: boolean;\n};\n\nexport type GameState = {\n  gamePhase: GamePhase;\n  currentGameRound: number;\n  gameRounds: Game[];\n  results: Record[];\n  playerName?: string;\n  startTimeInString?: string;\n  finishTimeInString?: string;\n  lastRoundStarted?: number;\n};\n\nfunction generateGames(nRounds: number): Game[] {\n  return Array(nRounds)\n    .fill(0)\n    .map(\n      (_, i) =>\n        new Game(\n          Math.floor(Math.random() * 99) + 1,\n          Math.floor(Math.random() * 99) + 1,\n          '＋',\n          (lhs: number, rhs: number) => lhs + rhs\n        )\n    );\n}\n\nexport function useGameState(nRounds = 5) {\n  const [gameState, setGameState] = useState<GameState>({\n    gamePhase: 'initial',\n    currentGameRound: 0,\n    gameRounds: generateGames(nRounds),\n    results: [] as Record[],\n  });\n  return {\n    gameState,\n    setPhase: (newPhase: GamePhase) => {\n      setGameState((prevState: GameState) => ({\n        ...prevState,\n        gamePhase: newPhase,\n      }));\n    },\n    addCurrentRound: () => {\n      setGameState(prevState => ({\n        ...prevState,\n        currentGameRound: prevState.currentGameRound + 1,\n      }));\n    },\n    setPlayerName: (playerName: string) => {\n      setGameState(prevState => ({\n        ...prevState,\n        playerName,\n      }));\n    },\n    setStartTimeInString: (startTimeInString: string) => {\n      setGameState(prevState => ({\n        ...prevState,\n        startTimeInString,\n      }));\n    },\n    setFinishTimeInString: (finishTimeInString: string) => {\n      setGameState(prevState => ({\n        ...prevState,\n        finishTimeInString,\n      }));\n    },\n    setLastRoundStarted: (lastRoundStarted: number) => {\n      setGameState(prevState => ({\n        ...prevState,\n        lastRoundStarted,\n      }));\n    },\n    clear: () => {\n      setGameState(prevState => ({\n        ...prevState,\n        results: [],\n        currentGameRound: 0,\n      }));\n    },\n    addResult: (result: Record) => {\n      setGameState(prevState => ({\n        ...prevState,\n        results: [...prevState.results, result],\n      }));\n    },\n  };\n}\n","import React, { useState, useCallback, useRef } from 'react';\nimport { withStyles, createStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\n\nimport NumPad from './NumPad';\nimport Results from './Results';\nimport Layout from './Layout';\n\nimport { useGameState, Game, GameState, Record } from '../hooks/useGameState';\n\nconst styles = createStyles({\n  button: {\n    margin: '1rem',\n    fontSize: '2rem',\n    width: '20rem',\n  },\n});\n\nfunction recordOf(gameState: GameState) {\n  const gameResult = [\n    gameState.startTimeInString,\n    gameState.playerName,\n    `${gameState.results.reduce(\n      (acc, curr) => acc + (curr.correct ? 1 : 0),\n      0\n    )} / ${gameState.results.length}`,\n    gameState.results.reduce(\n      (acc, curr) => acc + curr.elapsedTimeInMilliSec,\n      0\n    ) /\n      1000 /\n      gameState.gameRounds.length,\n  ];\n  console.log('gameResult=', gameResult);\n  return gameResult;\n}\n\ntype Props = {\n  classes: any;\n  log: any;\n};\n\nfunction MainPanel({ classes, log }: Props) {\n  const gameStateOperators = useGameState();\n\n  const {\n    gameState,\n    setPhase,\n    addCurrentRound,\n    setPlayerName,\n    setStartTimeInString,\n    setFinishTimeInString,\n    setLastRoundStarted,\n    clear,\n    addResult,\n  } = gameStateOperators;\n\n  const [gameLog, setGameLog] = useState<[][]>(log);\n\n  // gameStateをイベントハンドラとの間でシェアする。\n  const gameStateRef = useRef<GameState>(gameState);\n  gameStateRef.current = gameState;\n\n  // スタートボタンが押されたときに呼びだされるイベントハンドラ。\n  const gameStart = useCallback(() => {\n    setPhase('running');\n    const now = new Date();\n    setLastRoundStarted(now.getTime());\n    setStartTimeInString(now.toLocaleString());\n    clear();\n    setPlayerName('unknown');\n  }, []);\n\n  // 問題1問に対する回答がなされたときに呼びだされるイベントハンドラ。\n  const handleAnswered = useCallback((answer: number) => {\n    const gameState = gameStateRef.current;\n\n    if (gameState.lastRoundStarted) {\n      const game = gameState.gameRounds[gameState.currentGameRound];\n      if (gameState.lastRoundStarted) {\n        addResult({\n          elapsedTimeInMilliSec: Date.now() - gameState.lastRoundStarted,\n          correct: game.answer === answer,\n        });\n      }\n    }\n\n    if (gameState.currentGameRound === gameState.gameRounds.length - 1) {\n      // 一連の問題(Round)が終了\n      setFinishTimeInString(new Date().toString());\n      const record = recordOf(gameState);\n      setGameLog((prevValue: any) => {\n        const nextValue = [...prevValue, record];\n        console.log(nextValue);\n        localStorage.setItem('log', JSON.stringify(nextValue));\n        return nextValue;\n      });\n      setPhase('finished');\n    } else {\n      addCurrentRound();\n    }\n  }, []);\n\n  // 結果表示画面でOKボタンが押されたときに呼びだされるイベントハンドラ。\n  const gameReviewed = (gameState: GameState) => () => {\n    setPhase('initial');\n  };\n\n  return (\n    <Layout gameStateOperators={gameStateOperators} setGameLog={setGameLog}>\n      <Grid container>\n        <Grid item xs={1} />\n        {(() => {\n          if (gameState.gamePhase === 'initial') {\n            setPhase('splash');\n            return <div />;\n          } else if (gameState.gamePhase === 'splash') {\n            setTimeout(() => {\n              setPhase('ready');\n            }, 1000);\n            return (\n              <Grid container>\n                <Grid item xs={12}>\n                  <Typography align={'center'} variant={'h1'}>\n                    算数ゲーム\n                  </Typography>\n                </Grid>\n                <Grid item xs={12}>\n                  <Typography align={'center'} variant={'h4'}>\n                    さんすうゲームがはじまります。\n                  </Typography>\n                </Grid>\n              </Grid>\n            );\n          } else if (gameState.gamePhase === 'ready') {\n            return (\n              <Grid\n                container\n                style={{\n                  flexDirection: 'column',\n                }}>\n                <Grid item sm={1} />\n                <Grid\n                  item\n                  sm={10}\n                  style={{\n                    textAlign: 'center',\n                  }}>\n                  <Button\n                    variant=\"contained\"\n                    className={classes.button}\n                    color={'secondary'}\n                    onClick={gameStart}\n                    data-testid=\"start\">\n                    START\n                  </Button>\n                </Grid>\n                <Grid item xs={1} />\n              </Grid>\n            );\n          } else if (gameState.gamePhase === 'running') {\n            console.log('gameState==', gameState);\n            return (\n              <Grid item xs={10}>\n                <NumPad\n                  gameState={gameState}\n                  setPhase={setPhase}\n                  onAnswered={handleAnswered}\n                />\n              </Grid>\n            );\n          } else if (gameState.gamePhase === 'finished') {\n            return (\n              <Grid container>\n                <Grid item xs={12}>\n                  <Results\n                    componentProps={{\n                      width: '100%',\n                    }}\n                    gameLog={gameLog}\n                  />\n                </Grid>\n                <Grid\n                  item\n                  xs={12}\n                  style={{\n                    textAlign: 'center',\n                  }}>\n                  <Button\n                    variant=\"contained\"\n                    className={classes.button}\n                    color={'secondary'}\n                    onClick={gameReviewed(gameState)}\n                    data-testid=\"finished-ok\">\n                    OK\n                  </Button>\n                </Grid>\n              </Grid>\n            );\n          } else {\n            return <div>Error: {gameState.gamePhase}</div>;\n          }\n        })()}\n      </Grid>\n    </Layout>\n  );\n}\n\nexport default withStyles(styles)(MainPanel);\n","import React, { useState, useCallback } from 'react';\n\nimport { withStyles, createStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\n\nimport MainPanel from './MainPanel';\nimport { useGameState, Game, GameState, Record } from '../hooks/useGameState';\n\nconst styles = createStyles({});\n\ntype Props = {\n  classes: any;\n  log: any;\n};\n\nfunction App({ classes, log }: Props) {\n  return (\n    <>\n      <CssBaseline />\n      <MainPanel log={log} />\n    </>\n  );\n}\n\nexport default withStyles(styles)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nconst stringLog: string | null = localStorage.getItem('log');\nconsole.log(stringLog);\nlet log: any = [];\nif (stringLog === null) {\n  log = [];\n} else {\n  log = JSON.parse(stringLog);\n}\nconsole.log('load=', log);\nReactDOM.render(<App log={log} />, document.getElementById('root'));\n"],"sourceRoot":""}