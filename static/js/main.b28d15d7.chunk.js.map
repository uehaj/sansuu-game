{"version":3,"sources":["components/NumPad.tsx","components/Results.tsx","gameState.tsx","components/GameMainPanel.tsx","components/App.tsx","index.tsx"],"names":["onKey","keyTop","gameState","setNumber","onChange","useCallback","k","prevN","game","gameRounds","currentGameRound","lastRoundStarted","withStyles","numButton","margin","fontSize","textArea","inputArea","padding","_ref","classes","onSnackbarOk","message","_useState","useState","_useState2","Object","slicedToArray","number","react_default","a","createElement","Fragment","Snackbar_default","anchorOrigin","vertical","horizontal","open","Typography_default","variant","style","color","Button_default","onClick","Grid_default","container","spacing","item","xs","align","concat","length","sm","question","Paper_default","justify","map","n","key","textAlign","className","styles","createStyles","theme","root","width","marginTop","unit","overflowX","table","minWidth","props","gameLog","Table_default","TableHead_default","TableRow_default","TableCell_default","TableBody_default","result","i","component","scope","Game","lhs","rhs","opeName","operation","classCallCheck","this","leftHandSide","rightHandSide","operationName","answer","generateGames","nRounds","Array","fill","_","Math","floor","random","button","log","setGameLog","_useGameState","arguments","undefined","gamePhase","results","setGameState","setPhase","newPhase","prevState","objectSpread","setCurrentRound","newCurrentRound","setPlayerName","playerName","setStartTimeInString","startTimeInString","setFinishTimeInString","finishTimeInString","setLastRoundStarted","clearResult","addResult","toConsumableArray","useGameState","gameStart","now","Date","getTime","toLocaleString","handleAnswerd","elapsedTimeInMilliSec","correct","handleSnackBarOk","toString","gameResult","reduce","acc","curr","prevValue","localStorage","setItem","JSON","stringify","setTimeout","data-testid","components_NumPad","components_Results","flexGrow","grow","menuButton","marginLeft","marginRight","CssBaseline_default","AppBar_default","position","Toolbar_default","IconButton_default","aria-label","Menu_default","components_GameMainPanel","stringLog","getItem","parse","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.b28d15d7.chunk.js","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport green from '@material-ui/core/colors/green';\nimport amber from '@material-ui/core/colors/amber';\nimport InfoIcon from '@material-ui/icons/Info';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { Game, GameState } from '../gameState';\nimport classNames from 'classnames';\n\nconst styles = {\n  numButton: {\n    margin: '0.5rem',\n    fontSize: '1.2rem',\n  },\n  textArea: {\n    margin: '1rem',\n    fontSize: '2rem',\n  },\n  inputArea: {\n    margin: '1rem',\n    fontSize: '2rem',\n    padding: '0.5rem',\n  },\n};\n\ntype Props = {\n  classes: any;\n  onChange?: (game: Game, answer: number, lastRoundStarted: number) => void;\n  onSnackbarOk?: () => void;\n  gameState: GameState;\n  message?: string;\n};\n\nconst onKey = (\n  keyTop: any,\n  gameState: GameState,\n  setNumber: (z: number | ((y: number) => number)) => void,\n  onChange: Props['onChange']\n) =>\n  useCallback(\n    (k: any) => {\n      if (typeof keyTop === 'number') {\n        setNumber((prevN: number) => prevN * 10 + keyTop);\n      } else if (typeof keyTop === 'string') {\n        if (keyTop === 'CLR') {\n          setNumber(0);\n        } else if (onChange && keyTop === 'OK') {\n          setNumber(prevN => {\n            const game = gameState.gameRounds[gameState.currentGameRound];\n            if (gameState.lastRoundStarted) {\n              onChange(game, prevN, gameState.lastRoundStarted);\n            }\n            return prevN;\n          });\n        }\n      }\n    },\n    [keyTop, gameState, setNumber, onChange]\n  );\n\nfunction NumPad({\n  classes,\n  gameState,\n  onChange,\n  onSnackbarOk,\n  message,\n}: Props) {\n  const [number, setNumber] = useState<number>(0);\n\n  const game = gameState.gameRounds[gameState.currentGameRound];\n  return (\n    <>\n      <Snackbar\n        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n        open={!!message}\n        message={\n          <>\n            <Typography variant={'h4'} style={{ color: 'white' }}>\n              {message}\n            </Typography>\n            <Typography>\n              <Button\n                onClick={() => {\n                  setNumber(0);\n                  if (onSnackbarOk) {\n                    onSnackbarOk();\n                  }\n                }}\n                variant={'contained'}>\n                <Typography variant={'h4'}>OK</Typography>\n              </Button>\n            </Typography>\n          </>\n        }\n      />\n      <Grid container spacing={32}>\n        <Grid item xs={12}>\n          <Typography variant={'h4'} align={'center'}>\n            <b>{`問題${gameState.currentGameRound + 1} `}</b>(\n            {gameState.currentGameRound + 1} / {gameState.gameRounds.length})\n          </Typography>\n        </Grid>\n      </Grid>\n      <Grid container spacing={32} style={{ padding: '0.1em' }}>\n        <Grid item xs={12} sm={6}>\n          <Typography variant={'h4'}>{`${game.question}`}</Typography>\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <Paper>\n            <Typography variant={'h3'} align={'right'}>\n              {number}\n            </Typography>\n          </Paper>\n        </Grid>\n      </Grid>\n      <Paper style={{ margin: '0.1em', padding: '0.1em' }}>\n        <Grid container justify=\"space-between\">\n          {[1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 'CLR', 'OK'].map(n => (\n            <Grid item xs={4} key={n} style={{ textAlign: 'center' }}>\n              <Button\n                variant={'raised'}\n                className={classes.numButton}\n                onClick={onKey(n, gameState, setNumber, onChange)}>\n                {n}\n              </Button>\n            </Grid>\n          ))}\n        </Grid>\n      </Paper>\n    </>\n  );\n}\n\nexport default withStyles(styles)(NumPad);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, createStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport { GameState } from '../gameState';\n\nconst styles = createStyles((theme: any) => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing.unit * 3,\n    overflowX: 'auto',\n  },\n  table: {\n    minWidth: 700,\n  },\n}));\n\ntype Props = { classes: any; gameLog: any };\n\nfunction Results(props: Props) {\n  const { classes, gameLog } = props;\n\n  return (\n    <Paper className={classes.root}>\n      <Table className={classes.table}>\n        <TableHead>\n          <TableRow>\n            <TableCell>日付</TableCell>\n            <TableCell>名前</TableCell>\n            <TableCell>正解</TableCell>\n            <TableCell>平均時間</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {gameLog.map((result: any, i: number) => (\n            <TableRow key={i}>\n              <TableCell component=\"th\" scope=\"row\">\n                {result[0]}\n              </TableCell>\n              <TableCell component=\"th\" scope=\"row\">\n                {result[1]}\n              </TableCell>\n              <TableCell component=\"th\" scope=\"row\">\n                {result[2]}\n              </TableCell>\n              <TableCell component=\"th\" scope=\"row\">\n                {result[3]}\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </Paper>\n  );\n}\n\nexport default withStyles(styles)(Results);\n","import React, { useState } from 'react';\n\ntype GamePhase =\n  | 'initial'\n  | 'splash'\n  | 'ready'\n  | 'running'\n  | 'answered'\n  | 'finished';\n\nexport class Game {\n  private leftHandSide: number;\n  private rightHandSide: number;\n  private operationName: string;\n  private operation: (lhs: number, rhs: number) => number;\n\n  public answer: number;\n  public question: string;\n\n  constructor(\n    lhs: number,\n    rhs: number,\n    opeName: string,\n    operation: (lhs: number, rhs: number) => number\n  ) {\n    this.leftHandSide = lhs;\n    this.rightHandSide = rhs;\n    this.operation = operation;\n    this.answer = this.operation(lhs, rhs);\n    this.operationName = opeName;\n    this.question = `「${lhs} ${this.operationName} ${rhs}」の答えは？`;\n  }\n}\n\nexport type Record = {\n  elapsedTimeInMilliSec: number;\n  correct: boolean;\n};\n\nexport type GameState = {\n  gamePhase: GamePhase;\n  currentGameRound: number;\n  gameRounds: Game[];\n  results: Record[];\n  message?: string;\n  playerName?: string;\n  startTimeInString?: string;\n  finishTimeInString?: string;\n  lastRoundStarted?: number;\n};\n\nfunction generateGames(nRounds: number): Game[] {\n  return Array(nRounds)\n    .fill(0)\n    .map(\n      (_, i) =>\n        new Game(\n          Math.floor(Math.random() * 99) + 1,\n          Math.floor(Math.random() * 99) + 1,\n          '＋',\n          (lhs: number, rhs: number) => lhs + rhs\n        )\n    );\n}\n\nexport function useGameState(nRounds = 5) {\n  const [gameState, setGameState] = useState<GameState>({\n    gamePhase: 'initial',\n    currentGameRound: 0,\n    gameRounds: generateGames(nRounds),\n    results: [] as Record[],\n    message: undefined,\n  });\n  return {\n    gameState,\n    setPhase: (newPhase: GamePhase, message?: string) => {\n      setGameState((prevState: GameState) => ({\n        ...prevState,\n        gamePhase: newPhase,\n        message,\n      }));\n    },\n    setCurrentRound: (newCurrentRound: number) => {\n      setGameState(prevState => ({\n        ...prevState,\n        currentGameRound: newCurrentRound,\n      }));\n    },\n    setPlayerName: (playerName: string) => {\n      setGameState(prevState => ({\n        ...prevState,\n        playerName,\n      }));\n    },\n    setStartTimeInString: (startTimeInString: string) => {\n      setGameState(prevState => ({\n        ...prevState,\n        startTimeInString,\n      }));\n    },\n    setFinishTimeInString: (finishTimeInString: string) => {\n      setGameState(prevState => ({\n        ...prevState,\n        finishTimeInString,\n      }));\n    },\n    setLastRoundStarted: (lastRoundStarted: number) => {\n      setGameState(prevState => ({\n        ...prevState,\n        lastRoundStarted,\n      }));\n    },\n    clearResult: () => {\n      setGameState(prevState => ({\n        ...prevState,\n        results: [],\n      }));\n    },\n    addResult: (result: Record) => {\n      setGameState(prevState => ({\n        ...prevState,\n        results: [...prevState.results, result],\n      }));\n    },\n  };\n}\n","import React, { useState, useCallback } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\n\nimport NumPad from './NumPad';\nimport Results from './Results';\nimport { useGameState, Game, GameState, Record } from '../gameState';\n\nconst styles = {\n  button: {\n    margin: '3rem',\n    fontSize: '2rem',\n    width: '70%',\n  },\n};\n\ntype Props = {\n  classes: any;\n  log: any;\n};\n\nfunction GameMainPanel({ classes, log }: Props) {\n  const [gameLog, setGameLog] = useState<any>([]);\n  const {\n    gameState,\n    setPhase,\n    setCurrentRound,\n    setPlayerName,\n    setStartTimeInString,\n    setFinishTimeInString,\n    setLastRoundStarted,\n    clearResult,\n    addResult,\n  } = useGameState();\n\n  const gameStart = useCallback(() => {\n    setPhase('running');\n    const now = new Date();\n    setLastRoundStarted(now.getTime());\n    setStartTimeInString(now.toLocaleString());\n    setCurrentRound(0);\n    clearResult();\n    setPlayerName('unknown');\n  }, []);\n\n  const handleAnswerd = (\n    game: Game,\n    answer: number,\n    lastRoundStarted: number\n  ) => {\n    if (game.answer === answer) {\n      setPhase('answered', `正解です`);\n    } else {\n      setPhase('answered', `${answer}は不正解です。正解は${game.answer}`);\n    }\n    addResult({\n      elapsedTimeInMilliSec: Date.now() - lastRoundStarted,\n      correct: game.answer === answer,\n    });\n  };\n\n  const handleSnackBarOk = () => {\n    setPhase('running');\n    if (gameState.currentGameRound === gameState.gameRounds.length - 1) {\n      setFinishTimeInString(new Date().toString());\n      const gameResult = [\n        gameState.startTimeInString,\n        gameState.playerName,\n        `${gameState.results.reduce(\n          (acc, curr) => acc + (curr.correct ? 1 : 0),\n          0\n        )} / ${gameState.results.length}`,\n        gameState.results.reduce(\n          (acc, curr) => acc + curr.elapsedTimeInMilliSec,\n          0\n        ) /\n          1000 /\n          gameState.gameRounds.length,\n      ];\n      setGameLog((prevValue: any) => [...prevValue, gameResult]);\n      localStorage.setItem('log', JSON.stringify(gameResult));\n\n      setPhase('finished');\n    } else {\n      setCurrentRound(gameState.currentGameRound + 1);\n    }\n  };\n\n  const gameReviewed = (gameState: GameState) => () => {\n    setPhase('initial');\n  };\n\n  return (\n    <Grid container>\n      <Grid item xs={1} />\n      {(gameState => {\n        if (gameState.gamePhase === 'initial') {\n          setPhase('splash');\n          return <div />;\n        } else if (gameState.gamePhase === 'splash') {\n          setTimeout(() => {\n            setPhase('ready');\n          }, 1000);\n          return (\n            <Grid container>\n              <Grid item xs={12}>\n                <Typography align={'center'} variant={'h1'}>\n                  算数ゲーム\n                </Typography>\n              </Grid>\n              <Grid item xs={12}>\n                <Typography align={'center'} variant={'h4'}>\n                  さんすうゲームがはじまります。\n                </Typography>\n              </Grid>\n            </Grid>\n          );\n        } else if (gameState.gamePhase === 'ready') {\n          return (\n            <Grid container>\n              <Grid item xs={12}>\n                <Button\n                  variant=\"contained\"\n                  className={classes.button}\n                  color={'secondary'}\n                  onClick={gameStart}\n                  data-testid=\"start\">\n                  START\n                </Button>\n              </Grid>\n            </Grid>\n          );\n        } else if (gameState.gamePhase === 'running') {\n          return (\n            <Grid item xs={10}>\n              <NumPad gameState={gameState} onChange={handleAnswerd} />\n            </Grid>\n          );\n        } else if (gameState.gamePhase === 'answered') {\n          return (\n            <Grid item xs={10}>\n              <NumPad\n                gameState={gameState}\n                message={gameState.message}\n                onSnackbarOk={handleSnackBarOk}\n              />\n            </Grid>\n          );\n        } else if (gameState.gamePhase === 'finished') {\n          return (\n            <Grid container>\n              <Grid item>\n                <Results gameLog={gameLog} />\n              </Grid>\n              <Grid item xs={10}>\n                <Button\n                  variant=\"contained\"\n                  className={classes.button}\n                  color={'secondary'}\n                  onClick={gameReviewed(gameState)}\n                  data-testid=\"start\">\n                  OK\n                </Button>\n              </Grid>\n            </Grid>\n          );\n        } else {\n          return <div>Error</div>;\n        }\n      })(gameState)}\n    </Grid>\n  );\n}\n\nexport default withStyles(styles)(GameMainPanel);\n","import React, { useState, useCallback } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Grid from '@material-ui/core/Grid';\n\nimport GameMainPanel from './GameMainPanel';\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20,\n  },\n};\n\ntype Props = { classes: any; log: any };\n\nfunction App({ classes, log }: Props) {\n  return (\n    <>\n      <CssBaseline />\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"Menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant={'h4'} color=\"inherit\">\n            さんすうゲーム\n          </Typography>\n        </Toolbar>\n      </AppBar>\n\n      <GameMainPanel log={log} />\n    </>\n  );\n}\n\nexport default withStyles(styles)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nconst stringLog: string | null = localStorage.getItem('log');\nlet log: any = [];\nif (stringLog === null) {\n  log = [];\n} else {\n  log = JSON.parse(stringLog);\n}\nReactDOM.render(<App log={log} />, document.getElementById('root'));\n"],"sourceRoot":""}