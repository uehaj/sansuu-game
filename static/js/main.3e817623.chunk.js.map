{"version":3,"sources":["components/NumPad.tsx","gameState.tsx","components/GameMainPanel.tsx","components/App.tsx","index.tsx"],"names":["onKey","keyTop","gameState","setNumber","onChange","k","prevN","game","gameRounds","currentGameRound","lastRoundStarted","withStyles","numButton","margin","fontSize","textArea","inputArea","padding","_ref","classes","onOk","message","_useState","useState","_useState2","Object","slicedToArray","number","react_default","a","createElement","Fragment","Snackbar_default","anchorOrigin","vertical","horizontal","open","Typography_default","variant","style","color","Button_default","onClick","Grid_default","container","spacing","item","xs","concat","question","Paper_default","align","justify","map","n","key","textAlign","className","Game","lhs","rhs","opeName","operation","classCallCheck","this","leftHandSide","rightHandSide","operationName","answer","generateGames","nRounds","Array","fill","_","i","Math","floor","random","button","_useGameState","arguments","length","undefined","gamePhase","results","setGameState","setPhase","newPhase","prevState","objectSpread","setCurrentRound","newCurrentRound","setPlayerName","playerName","setStartTimeInString","startTimeInString","setFinishTimeInString","finishTimeInString","setLastRoundStarted","addResult","result","toConsumableArray","useGameState","gameStart","useCallback","now","Date","getTime","toLocaleString","handleAnswerd","elapsedTimeInMilliSec","correct","handleOk","toString","setTimeout","data-testid","components_NumPad","root","flexGrow","grow","menuButton","marginLeft","marginRight","CssBaseline_default","AppBar_default","position","Toolbar_default","IconButton_default","aria-label","Menu_default","components_GameMainPanel","ReactDOM","render","App","document","getElementById"],"mappings":"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","file":"static/js/main.3e817623.chunk.js","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport green from '@material-ui/core/colors/green';\nimport amber from '@material-ui/core/colors/amber';\nimport InfoIcon from '@material-ui/icons/Info';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { Game, GameState } from '../gameState';\nimport classNames from 'classnames';\n\nconst styles = {\n  numButton: {\n    margin: '1rem',\n    fontSize: '2rem',\n  },\n  textArea: {\n    margin: '1rem',\n    fontSize: '2rem',\n  },\n  inputArea: {\n    margin: '1rem',\n    fontSize: '2rem',\n    padding: '0.5rem',\n  },\n};\n\ntype Props = {\n  classes: any;\n  onChange?: (game: Game, answer: number, lastRoundStarted: number) => void;\n  onOk?: () => void;\n  gameState: GameState;\n  message?: string;\n};\n\nconst onKey = (\n  keyTop: any,\n  gameState: GameState,\n  setNumber: (z: number | ((y: number) => number)) => void,\n  onChange: Props['onChange']\n) => (k: any) => {\n  if (typeof keyTop === 'number') {\n    setNumber((prevN: number) => prevN * 10 + keyTop);\n  } else if (typeof keyTop === 'string') {\n    if (keyTop === 'CLR') {\n      setNumber(0);\n    } else if (onChange && keyTop === 'OK') {\n      const game = gameState.gameRounds[gameState.currentGameRound];\n      setNumber(prevN => {\n        if (gameState.lastRoundStarted) {\n          onChange(game, prevN, gameState.lastRoundStarted);\n        }\n        return prevN;\n      });\n    }\n  }\n};\n\nfunction NumPad({ classes, gameState, onChange, onOk, message }: Props) {\n  const [number, setNumber] = useState<number>(0);\n  const game = gameState.gameRounds[gameState.currentGameRound];\n  return (\n    <>\n      <Snackbar\n        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n        open={!!message}\n        message={\n          <>\n            <Typography variant={'h4'} style={{ color: 'white' }}>\n              {message}\n            </Typography>\n            <Typography>\n              <Button onClick={onOk} variant={'contained'}>\n                <Typography variant={'h4'}>OK</Typography>\n              </Button>\n            </Typography>\n          </>\n        }\n      />\n      <Grid container spacing={32}>\n        <Grid item xs={12}>\n          <Typography variant={'h3'}>\n            <b>{`問題${gameState.currentGameRound + 1} `}</b>\n          </Typography>\n        </Grid>\n      </Grid>\n      <Grid container spacing={32} style={{ padding: '1em' }}>\n        <Grid item xs={6}>\n          <Typography variant={'h4'}>{`${game.question}`}</Typography>\n        </Grid>\n        <Grid item xs={6}>\n          <Paper>\n            <Typography variant={'h3'} align={'right'}>\n              {number}\n            </Typography>\n          </Paper>\n        </Grid>\n      </Grid>\n      <Paper style={{ margin: '1em' }}>\n        <Grid container justify=\"space-between\">\n          {[1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 'CLR', 'OK'].map(n => (\n            <Grid item xs={4} key={n} style={{ textAlign: 'center' }}>\n              <Button\n                variant=\"contained\"\n                className={classes.numButton}\n                onClick={onKey(n, gameState, setNumber, onChange)}>\n                {n}\n              </Button>\n            </Grid>\n          ))}\n        </Grid>\n      </Paper>\n    </>\n  );\n}\n\nexport default withStyles(styles)(NumPad);\n","import React, { useState } from 'react';\n\ntype GamePhase =\n  | 'initial'\n  | 'splash'\n  | 'ready'\n  | 'running'\n  | 'answered'\n  | 'finished';\n\nexport class Game {\n  private leftHandSide: number;\n  private rightHandSide: number;\n  private operationName: string;\n  private operation: (lhs: number, rhs: number) => number;\n\n  public answer: number;\n  public question: string;\n\n  constructor(\n    lhs: number,\n    rhs: number,\n    opeName: string,\n    operation: (lhs: number, rhs: number) => number\n  ) {\n    this.leftHandSide = lhs;\n    this.rightHandSide = rhs;\n    this.operation = operation;\n    this.answer = this.operation(lhs, rhs);\n    this.operationName = opeName;\n    this.question = `「${lhs} ${this.operationName} ${rhs}」の答えは？`;\n  }\n}\n\nexport type Record = {\n  elapsedTimeInMilliSec: number;\n  correct: boolean;\n};\n\nexport type GameState = {\n  gamePhase: GamePhase;\n  currentGameRound: number;\n  gameRounds: Game[];\n  results: Record[];\n  message?: string;\n  playerName?: string;\n  startTimeInString?: string;\n  finishTimeInString?: string;\n  lastRoundStarted?: number;\n};\n\nfunction generateGames(nRounds: number): Game[] {\n  return Array(nRounds)\n    .fill(0)\n    .map(\n      (_, i) =>\n        new Game(\n          Math.floor(Math.random() * 99) + 1,\n          Math.floor(Math.random() * 99) + 1,\n          '＋',\n          (lhs: number, rhs: number) => lhs + rhs\n        )\n    );\n}\n\nexport function useGameState(nRounds = 5) {\n  const [gameState, setGameState] = useState<GameState>({\n    gamePhase: 'initial',\n    currentGameRound: 0,\n    gameRounds: generateGames(nRounds),\n    results: [] as Record[],\n    message: undefined,\n  });\n  return {\n    gameState,\n    setPhase: (newPhase: GamePhase, message?: string) => {\n      setGameState((prevState: GameState) => ({\n        ...prevState,\n        gamePhase: newPhase,\n        message,\n      }));\n    },\n    setCurrentRound: (newCurrentRound: number) => {\n      setGameState(prevState => ({\n        ...prevState,\n        currentGameRound: newCurrentRound,\n      }));\n    },\n    setPlayerName: (playerName: string) => {\n      setGameState(prevState => ({\n        ...prevState,\n        playerName,\n      }));\n    },\n    setStartTimeInString: (startTimeInString: string) => {\n      setGameState(prevState => ({\n        ...prevState,\n        startTimeInString,\n      }));\n    },\n    setFinishTimeInString: (finishTimeInString: string) => {\n      setGameState(prevState => ({\n        ...prevState,\n        finishTimeInString,\n      }));\n    },\n    setLastRoundStarted: (lastRoundStarted: number) => {\n      setGameState(prevState => ({\n        ...prevState,\n        lastRoundStarted,\n      }));\n    },\n    addResult: (result: Record) => {\n      setGameState(prevState => ({\n        ...prevState,\n        results: [...prevState.results, result],\n      }));\n    },\n  };\n}\n","import React, { useCallback } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\n\nimport NumPad from './NumPad';\nimport { useGameState, Game } from '../gameState';\n\nconst styles = {\n  button: {\n    margin: '1rem',\n    fontSize: '2rem',\n  },\n};\n\ntype Props = {\n  classes: any;\n};\n\nfunction GameMainPanel({ classes }: Props) {\n  const {\n    gameState,\n    setPhase,\n    setCurrentRound,\n    setPlayerName,\n    setStartTimeInString,\n    setFinishTimeInString,\n    setLastRoundStarted,\n    addResult,\n  } = useGameState();\n\n  const gameStart = useCallback(() => {\n    setPhase('running');\n    const now = new Date();\n    setLastRoundStarted(now.getTime());\n    setStartTimeInString(now.toLocaleString());\n  }, []);\n\n  const handleAnswerd = (\n    game: Game,\n    answer: number,\n    lastRoundStarted: number\n  ) => {\n    if (game.answer === answer) {\n      setPhase('answered', `正解です`);\n    } else {\n      setPhase('answered', `${answer}は不正解です。正解は${game.answer}`);\n    }\n    addResult({\n      elapsedTimeInMilliSec: Date.now() - lastRoundStarted,\n      correct: game.answer === answer,\n    });\n  };\n\n  const handleOk = () => {\n    setPhase('running');\n    if (gameState.currentGameRound === gameState.gameRounds.length - 1) {\n      setFinishTimeInString(new Date().toString());\n      setPhase('finished');\n    } else {\n      setCurrentRound(gameState.currentGameRound + 1);\n    }\n  };\n\n  return (\n    <Grid container style={{ margin: '1em' }}>\n      <Grid item xs={1} />\n      {(gameState => {\n        if (gameState.gamePhase === 'initial') {\n          setPhase('splash');\n          return <div />;\n        } else if (gameState.gamePhase === 'splash') {\n          setTimeout(() => {\n            setPhase('ready');\n          }, 1000);\n          return (\n            <Grid container>\n              <Grid item xs={12}>\n                <Typography align={'center'} variant={'h1'}>\n                  算数ゲーム\n                </Typography>\n              </Grid>\n              <Grid item xs={12}>\n                <Typography align={'center'} variant={'h4'}>\n                  さんすうゲームがはじまります。\n                </Typography>\n              </Grid>\n            </Grid>\n          );\n        } else if (gameState.gamePhase === 'ready') {\n          return (\n            <Grid item xs={10}>\n              <Button\n                variant=\"contained\"\n                className={classes.button}\n                color={'secondary'}\n                onClick={gameStart}\n                data-testid=\"start\">\n                START\n              </Button>\n            </Grid>\n          );\n        } else if (gameState.gamePhase === 'running') {\n          return (\n            <Grid item xs={10}>\n              <NumPad gameState={gameState} onChange={handleAnswerd} />\n            </Grid>\n          );\n        } else if (gameState.gamePhase === 'answered') {\n          return (\n            <Grid item xs={10}>\n              <NumPad\n                gameState={gameState}\n                message={gameState.message}\n                onOk={handleOk}\n              />\n            </Grid>\n          );\n        } else {\n          return <div>Error</div>;\n        }\n      })(gameState)}\n    </Grid>\n  );\n}\n\nexport default withStyles(styles)(GameMainPanel);\n","import React, { useState, useCallback } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Grid from '@material-ui/core/Grid';\n\nimport GameMainPanel from './GameMainPanel';\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20,\n  },\n};\n\ntype Props = { classes: any };\n\nfunction ButtonAppBar({ classes }: Props) {\n  return (\n    <>\n      <CssBaseline />\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"Menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant={'h4'} color=\"inherit\">\n            さんすうゲーム\n          </Typography>\n        </Toolbar>\n      </AppBar>\n\n      <GameMainPanel />\n    </>\n  );\n}\n\nexport default withStyles(styles)(ButtonAppBar);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}