{"version":3,"sources":["components/Header.tsx","components/Layout.tsx","components/App.tsx","serviceWorker.js","index.tsx","components/MainPanel.tsx","components/Results.tsx","hooks/useGameState.tsx","components/AnsweredPanel.tsx","components/NumPad.tsx"],"names":["styles","createStyles","appBar","marginBottom","menuButton","marginLeft","marginRight","withStyles","_ref","classes","gameStateOperators","setGameLog","_useState","useState","_useState2","Object","slicedToArray","anchorEl","setAnchorEl","setPhase","gameState","addCurrentRound","setPlayerName","setStartTimeInString","setFinishTimeInString","setLastRoundStarted","clear","addResult","react_default","a","createElement","Fragment","AppBar_default","position","className","Toolbar_default","IconButton_default","color","onClick","event","currentTarget","icons_Menu_default","Typography_default","variant","Menu_default","id","open","Boolean","onClose","MenuItem_default","localStorage","setItem","JSON","stringify","__webpack_exports__","children","components_Header","log","CssBaseline_default","MainPanel","window","location","hostname","match","stringLog","getItem","console","parse","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","button","margin","fontSize","width","useGameState","_Users_uehaj_work_201903_sansuu_game_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","gameLog","gameStateRef","useRef","current","gameStart","useCallback","now","Date","getTime","toLocaleString","handleAnswered","answer","lastRoundStarted","game","questions","currentQuestion","elapsedTimeInMilliSec","correct","length","setImmediate","toString","prevValue","record","gameResult","startTimeInString","playerName","concat","results","reduce","acc","curr","recordOf","nextValue","_Users_uehaj_work_201903_sansuu_game_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_2___default","_Layout__WEBPACK_IMPORTED_MODULE_9__","_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_6___default","container","item","xs","gamePhase","setTimeout","_material_ui_core_Typography__WEBPACK_IMPORTED_MODULE_4___default","align","style","flexDirection","sm","textAlign","_material_ui_core_Button__WEBPACK_IMPORTED_MODULE_5___default","data-testid","_NumPad__WEBPACK_IMPORTED_MODULE_7__","onAnswered","_Results__WEBPACK_IMPORTED_MODULE_8__","componentProps","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_1__","_material_ui_core_Table__WEBPACK_IMPORTED_MODULE_2__","_material_ui_core_Table__WEBPACK_IMPORTED_MODULE_2___default","_material_ui_core_TableBody__WEBPACK_IMPORTED_MODULE_3__","_material_ui_core_TableBody__WEBPACK_IMPORTED_MODULE_3___default","_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_4__","_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_4___default","_material_ui_core_TableHead__WEBPACK_IMPORTED_MODULE_5__","_material_ui_core_TableHead__WEBPACK_IMPORTED_MODULE_5___default","_material_ui_core_TableRow__WEBPACK_IMPORTED_MODULE_6__","_material_ui_core_TableRow__WEBPACK_IMPORTED_MODULE_6___default","_material_ui_core_Paper__WEBPACK_IMPORTED_MODULE_7__","_material_ui_core_Paper__WEBPACK_IMPORTED_MODULE_7___default","theme","root","marginTop","spacing","unit","overflowX","table","minWidth","props","assign","map","result","i","key","component","scope","Math","round","Question","lhs","rhs","opeName","operation","_Users_uehaj_work_201903_sansuu_game_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__","this","leftHandSide","rightHandSide","operationName","question","generateGames","nRounds","Array","fill","_","floor","random","arguments","undefined","_Users_uehaj_work_201903_sansuu_game_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","setGameState","newPhase","prevState","_Users_uehaj_work_201903_sansuu_game_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","finishTimeInString","message","onOk","answerShowing","Snackbar_default","anchorOrigin","vertical","horizontal","Button_default","buttonWrapper","genMessage","handleNumberPressed","keyTop","setNumber","prevN","handleCLR","handleOK","setAnswer","number","_useState3","_useState4","ref","useEffect","focus","components_AnsweredPanel","Grid_default","padding","Paper_default","justify","buttonRef"],"mappings":"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","file":"static/js/main.7d250a0c.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles, createStyles } from '@material-ui/core/styles';\n\nimport { useGameState } from '../hooks/useGameState';\n\nconst styles = createStyles({\n  appBar: {\n    marginBottom: '0.5rem',\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20,\n  },\n});\n\ntype Props = {\n  classes: any;\n  gameStateOperators: ReturnType<typeof useGameState>;\n  setGameLog: (arg: [][]) => void;\n};\n\nfunction Header({ classes, gameStateOperators, setGameLog }: Props) {\n  const [anchorEl, setAnchorEl] = useState(null);\n  const {\n    gameState,\n    setPhase,\n    addCurrentRound,\n    setPlayerName,\n    setStartTimeInString,\n    setFinishTimeInString,\n    setLastRoundStarted,\n    clear,\n    addResult,\n  } = gameStateOperators;\n\n  const handleClick = (event: any) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleSelectBreak = (event: any) => {\n    setAnchorEl(null);\n    setPhase('finished');\n  };\n\n  const handleSelectRecordClear = (event: any) => {\n    setAnchorEl(null);\n    localStorage.setItem('log', JSON.stringify([]));\n    setGameLog([]);\n    setPhase('finished');\n  };\n\n  const handleClose = (event: any) => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <>\n      <AppBar position=\"static\" className={classes.appBar}>\n        <Toolbar>\n          <IconButton\n            className={classes.menuButton}\n            color=\"inherit\"\n            onClick={handleClick}>\n            <MenuIcon />\n          </IconButton>\n          <Typography variant={'h4'} color=\"inherit\">\n            さんすうゲーム\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <div>\n        <Menu\n          id=\"simple-menu\"\n          anchorEl={anchorEl}\n          open={Boolean(anchorEl)}\n          onClose={handleClose}>\n          <MenuItem onClick={handleSelectBreak}>中止</MenuItem>\n          <MenuItem onClick={handleSelectRecordClear}>履歴を消去</MenuItem>\n        </Menu>\n      </div>\n    </>\n  );\n}\n\nexport default withStyles(styles)(Header);\n","import React, { useState, useCallback } from 'react';\n\nimport Header from './Header';\nimport { useGameState } from '../hooks/useGameState';\n\ntype Props = {\n  gameStateOperators: ReturnType<typeof useGameState>;\n  setGameLog: (arg: [][]) => void;\n  children: React.ReactNode;\n};\n\nexport default ({ gameStateOperators, children, setGameLog }: Props) => (\n  <>\n    <Header gameStateOperators={gameStateOperators} setGameLog={setGameLog} />\n    {children}\n  </>\n);\n","import React, { useState, useCallback } from 'react';\n\nimport { withStyles, createStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\n\nimport MainPanel from './MainPanel';\n\nconst styles = createStyles({});\n\ntype Props = {\n  classes: any;\n  log: any;\n};\n\nfunction App({ classes, log }: Props) {\n  return (\n    <>\n      <CssBaseline />\n      <MainPanel log={log} />\n    </>\n  );\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst stringLog: string | null = localStorage.getItem('log');\nconsole.log(stringLog);\nlet log: any = [];\nif (stringLog === null) {\n  log = [];\n} else {\n  log = JSON.parse(stringLog);\n}\nconsole.log('load=', log);\nReactDOM.render(<App log={log} />, document.getElementById('root'));\n//serviceWorker.register();\nserviceWorker.unregister();\n","import React, { useState, useCallback, useRef } from 'react';\nimport { withStyles, createStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\n\nimport NumPad from './NumPad';\nimport Results from './Results';\nimport Layout from './Layout';\n\nimport {\n  useGameState,\n  Question,\n  GameState,\n  Record,\n} from '../hooks/useGameState';\n\nconst styles = createStyles({\n  button: {\n    margin: '1rem',\n    fontSize: '2rem',\n    width: '20rem',\n  },\n});\n\nfunction recordOf(gameState: GameState) {\n  console.log(gameState);\n  const gameResult = [\n    gameState.startTimeInString,\n    gameState.playerName,\n    `${gameState.results.reduce(\n      (acc, curr) => acc + (curr.correct ? 1 : 0),\n      0\n    )} / ${gameState.results.length}`,\n    gameState.results.reduce(\n      (acc, curr) => acc + curr.elapsedTimeInMilliSec,\n      0\n    ) /\n      1000 /\n      gameState.questions.length,\n  ];\n  console.log('gameResult=', gameResult);\n  return gameResult;\n}\n\ntype Props = {\n  classes: any;\n  log: any;\n};\n\nfunction MainPanel({ classes, log }: Props) {\n  const gameStateOperators = useGameState();\n\n  const {\n    gameState,\n    setPhase,\n    addCurrentRound,\n    setPlayerName,\n    setStartTimeInString,\n    setFinishTimeInString,\n    setLastRoundStarted,\n    clear,\n    addResult,\n  } = gameStateOperators;\n\n  const [gameLog, setGameLog] = useState<[][]>(log);\n\n  // gameStateをイベントハンドラとの間でシェアする。\n  const gameStateRef = useRef<GameState>(gameState);\n  gameStateRef.current = gameState;\n\n  // スタートボタンが押されたときに呼びだされるイベントハンドラ。\n  const gameStart = useCallback(() => {\n    setPhase('running');\n    const now = new Date();\n    setLastRoundStarted(now.getTime());\n    setStartTimeInString(now.toLocaleString());\n    clear();\n    setPlayerName('unknown');\n  }, []);\n\n  // ひとつの質問の回答がなされたときに呼びだされるイベントハンドラ。\n  const handleAnswered = useCallback((answer: number) => {\n    let gameState = gameStateRef.current;\n\n    // この質問の開始時刻と現在時刻の差を記録\n    if (gameState.lastRoundStarted) {\n      const game = gameState.questions[gameState.currentQuestion];\n      console.log('[1]', gameState);\n      if (gameState.lastRoundStarted) {\n        addResult({\n          elapsedTimeInMilliSec: Date.now() - gameState.lastRoundStarted,\n          correct: game.answer === answer,\n        });\n      }\n      console.log('[2]', gameState);\n    }\n\n    if (gameState.currentQuestion === gameState.questions.length - 1) {\n      // 一連の問題(Round)が終了\n      setImmediate(() => {\n        // addResultで更新されたgameStateを使うため次のイベントループで処理する\n        setFinishTimeInString(new Date().toString());\n        gameState = gameStateRef.current;\n        setGameLog((prevValue: any) => {\n          const record = recordOf(gameState);\n          const nextValue = [...prevValue, record];\n          console.log(nextValue);\n          localStorage.setItem('log', JSON.stringify(nextValue));\n          return nextValue;\n        });\n        setPhase('finished');\n      });\n    } else {\n      addCurrentRound();\n    }\n  }, []);\n\n  // 結果表示画面でOKボタンが押されたときに呼びだされるイベントハンドラ。\n  const gameReviewed = (gameState: GameState) => () => {\n    setPhase('initial');\n  };\n\n  return (\n    <Layout gameStateOperators={gameStateOperators} setGameLog={setGameLog}>\n      <Grid container>\n        <Grid item xs={1} />\n        {(() => {\n          if (gameState.gamePhase === 'initial') {\n            setPhase('splash');\n            return <div />;\n          } else if (gameState.gamePhase === 'splash') {\n            setTimeout(() => {\n              setPhase('ready');\n            }, 1000);\n            return (\n              <Grid container>\n                <Grid item xs={12}>\n                  <Typography align={'center'} variant={'h1'}>\n                    算数ゲーム\n                  </Typography>\n                </Grid>\n                <Grid item xs={12}>\n                  <Typography align={'center'} variant={'h4'}>\n                    さんすうゲームがはじまります。\n                  </Typography>\n                </Grid>\n              </Grid>\n            );\n          } else if (gameState.gamePhase === 'ready') {\n            return (\n              <Grid\n                container\n                style={{\n                  flexDirection: 'column',\n                }}>\n                <Grid item sm={1} />\n                <Grid\n                  item\n                  sm={10}\n                  style={{\n                    textAlign: 'center',\n                  }}>\n                  <Button\n                    variant=\"contained\"\n                    className={classes.button}\n                    color={'secondary'}\n                    onClick={gameStart}\n                    data-testid=\"start\">\n                    START\n                  </Button>\n                </Grid>\n                <Grid item xs={1} />\n              </Grid>\n            );\n          } else if (gameState.gamePhase === 'running') {\n            console.log('gameState==', gameState);\n            return (\n              <Grid item xs={10}>\n                <NumPad\n                  gameState={gameState}\n                  setPhase={setPhase}\n                  onAnswered={handleAnswered}\n                />\n              </Grid>\n            );\n          } else if (gameState.gamePhase === 'finished') {\n            return (\n              <Grid container>\n                <Grid item xs={12}>\n                  <Results\n                    componentProps={{\n                      width: '100%',\n                    }}\n                    gameLog={gameLog}\n                  />\n                </Grid>\n                <Grid\n                  item\n                  xs={12}\n                  style={{\n                    textAlign: 'center',\n                  }}>\n                  <Button\n                    variant=\"contained\"\n                    className={classes.button}\n                    color={'secondary'}\n                    onClick={gameReviewed(gameState)}\n                    data-testid=\"finished-ok\">\n                    OK\n                  </Button>\n                </Grid>\n              </Grid>\n            );\n          } else {\n            return <div>Error: {gameState.gamePhase}</div>;\n          }\n        })()}\n      </Grid>\n    </Layout>\n  );\n}\n\nexport default withStyles(styles)(MainPanel);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, createStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport { GameState } from '../hooks/useGameState';\n\nconst styles = createStyles((theme: any) => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing.unit * 3,\n    overflowX: 'auto',\n  },\n  table: {\n    minWidth: 700,\n  },\n}));\n\ntype Props = { classes: any; componentProps: any; gameLog: any };\n\nfunction Results(props: Props) {\n  const { classes, componentProps, gameLog } = props;\n\n  return (\n    <Paper className={classes.root} {...componentProps}>\n      <Table className={classes.table}>\n        <TableHead>\n          <TableRow>\n            <TableCell>日付</TableCell>\n            <TableCell>名前</TableCell>\n            <TableCell>正解率</TableCell>\n            <TableCell>平均時間</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {gameLog.map((result: any, i: number) => (\n            <TableRow key={i}>\n              <TableCell component=\"th\" scope=\"row\">\n                {result[0]}\n              </TableCell>\n              <TableCell component=\"th\" scope=\"row\">\n                {result[1]}\n              </TableCell>\n              <TableCell component=\"th\" scope=\"row\">\n                {result[2]}\n              </TableCell>\n              <TableCell component=\"th\" scope=\"row\">\n                {Math.round(result[3] * 10) / 10}\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </Paper>\n  );\n}\n\nexport default withStyles(styles)(Results);\n","import React, { useState } from 'react';\n\nexport type GamePhase = 'initial' | 'splash' | 'ready' | 'running' | 'finished';\n\nexport class Question {\n  private leftHandSide: number;\n  private rightHandSide: number;\n  private operationName: string;\n  private operation: (lhs: number, rhs: number) => number;\n\n  public answer: number;\n  public question: string;\n\n  constructor(\n    lhs: number,\n    rhs: number,\n    opeName: string,\n    operation: (lhs: number, rhs: number) => number\n  ) {\n    this.leftHandSide = lhs;\n    this.rightHandSide = rhs;\n    this.operation = operation;\n    this.answer = this.operation(lhs, rhs);\n    this.operationName = opeName;\n    this.question = `「${lhs} ${this.operationName} ${rhs}」の答えは？`;\n  }\n}\n\nexport type Record = {\n  elapsedTimeInMilliSec: number;\n  correct: boolean;\n};\n\nexport type GameState = {\n  gamePhase: GamePhase;\n  currentQuestion: number;\n  questions: Question[];\n  results: Record[];\n  playerName?: string;\n  startTimeInString?: string;\n  finishTimeInString?: string;\n  lastRoundStarted?: number;\n};\n\nfunction generateGames(nRounds: number): Question[] {\n  return Array(nRounds)\n    .fill(0)\n    .map(\n      (_, i) =>\n        new Question(\n          Math.floor(Math.random() * 99) + 1,\n          Math.floor(Math.random() * 99) + 1,\n          '＋',\n          (lhs: number, rhs: number) => lhs + rhs\n        )\n    );\n}\n\nexport function useGameState(nRounds = 5) {\n  const [gameState, setGameState] = useState<GameState>({\n    gamePhase: 'initial',\n    currentQuestion: 0,\n    questions: generateGames(nRounds),\n    results: [] as Record[],\n  });\n  return {\n    gameState,\n    setPhase: (newPhase: GamePhase) => {\n      setGameState((prevState: GameState) => ({\n        ...prevState,\n        gamePhase: newPhase,\n      }));\n    },\n    addCurrentRound: () => {\n      setGameState(prevState => ({\n        ...prevState,\n        currentQuestion: prevState.currentQuestion + 1,\n      }));\n    },\n    setPlayerName: (playerName: string) => {\n      setGameState(prevState => ({\n        ...prevState,\n        playerName,\n      }));\n    },\n    setStartTimeInString: (startTimeInString: string) => {\n      setGameState(prevState => ({\n        ...prevState,\n        startTimeInString,\n      }));\n    },\n    setFinishTimeInString: (finishTimeInString: string) => {\n      setGameState(prevState => ({\n        ...prevState,\n        finishTimeInString,\n      }));\n    },\n    setLastRoundStarted: (lastRoundStarted: number) => {\n      setGameState(prevState => ({\n        ...prevState,\n        lastRoundStarted,\n      }));\n    },\n    clear: () => {\n      setGameState(prevState => ({\n        ...prevState,\n        results: [],\n        currentQuestion: 0,\n      }));\n    },\n    addResult: (result: Record) => {\n      setGameState(prevState => ({\n        ...prevState,\n        results: [...prevState.results, result],\n      }));\n    },\n  };\n}\n","import React, { useState, useCallback } from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles, createStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nconst styles = createStyles({});\n\ntype Props = {\n  classes: any;\n  onOk: () => void;\n  message?: string;\n  answerShowing: boolean;\n};\n\nfunction AnsweredPanel({ message, onOk, answerShowing }: Props) {\n  return (\n    <Snackbar\n      anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n      open={answerShowing}\n      message={\n        <>\n          <Typography variant={'h4'} style={{ color: 'white' }}>\n            {message}\n          </Typography>\n          <Typography>\n            <Button\n              onClick={() => {\n                if (onOk) {\n                  onOk();\n                }\n              }}\n              variant={'contained'}>\n              <Typography variant={'h4'}>OK</Typography>\n            </Button>\n          </Typography>\n        </>\n      }\n    />\n  );\n}\n\nexport default withStyles(styles)(AnsweredPanel);\n","import React, { useState, useCallback, useRef, useEffect } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport { withStyles, createStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\n\nimport AnsweredPanel from '../components/AnsweredPanel';\nimport { Question, GameState, GamePhase } from '../hooks/useGameState';\n\nconst styles = createStyles({\n  buttonWrapper: {\n    textAlign: 'center',\n  },\n  button: {\n    margin: '0.5rem',\n    fontSize: '1.2rem',\n  },\n});\n\nfunction genMessage(game: Question, answer: number | null) {\n  if (answer === null) {\n    return '';\n  } else if (game.answer === answer) {\n    return `正解です`;\n  } else {\n    return `${answer}は不正解です。正解は${game.answer}`;\n  }\n}\n\ntype Props = {\n  classes: any;\n  setPhase: (newPhase: GamePhase) => void;\n  onAnswered: (answer: number) => void;\n  gameState: GameState;\n};\n\nconst handleNumberPressed = (\n  keyTop: number,\n  setNumber: (z: number | ((y: number) => number)) => void\n) =>\n  useCallback(\n    (event: any) => {\n      setNumber((prevN: number) => prevN * 10 + keyTop);\n    },\n    [keyTop, setNumber]\n  );\n\nconst handleCLR = (setNumber: (z: number | ((y: number) => number)) => void) =>\n  useCallback((event: any) => {\n    setNumber(0);\n  }, []);\n\nconst handleOK = (\n  setNumber: (z: number | ((y: number) => number)) => void,\n  setAnswer: (z: number) => void\n) =>\n  useCallback((event: any) => {\n    setNumber(prevN => {\n      setAnswer(prevN);\n      return prevN;\n    });\n  }, []);\n\nfunction NumPad({ classes, gameState, onAnswered, setPhase }: Props) {\n  const [number, setNumber] = useState<number>(0);\n  const [answer, setAnswer] = useState<number | null>(null);\n\n  // refを使ってボタンにフォーカスを取得させる\n  const ref = useRef();\n  useEffect(() => {\n    if (ref && ref.current) {\n      (ref.current as any).focus();\n    }\n  });\n\n  // gameStateをイベントハンドラとの間でシェアする。\n  const gameStateRef = useRef<GameState>(gameState);\n  gameStateRef.current = gameState;\n\n  const game = gameState.questions[gameState.currentQuestion];\n  return (\n    <>\n      <AnsweredPanel\n        message={genMessage(game, answer)}\n        answerShowing={answer !== null}\n        onOk={() => {\n          setNumber(0);\n          const gameState = gameStateRef.current;\n          if (gameState.currentQuestion === gameState.questions.length - 1) {\n            setPhase('finished');\n          }\n          if (answer !== null) {\n            onAnswered(answer);\n            setAnswer(null);\n          }\n        }}\n      />\n      <Grid container spacing={32}>\n        <Grid item xs={12}>\n          <Typography variant={'h4'} align={'center'}>\n            <b>{`問題${gameState.currentQuestion + 1} `}</b>/{' '}\n            {gameState.questions.length}\n          </Typography>\n        </Grid>\n      </Grid>\n      <Grid\n        container\n        spacing={32}\n        style={{ marginBottom: '0.5rem', padding: '0.1fem' }}>\n        <Grid item xs={12} sm={6}>\n          <Typography variant={'h4'}>{`${game.question}`}</Typography>\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <Paper>\n            <Typography variant={'h3'} align={'right'}>\n              {number}\n            </Typography>\n          </Paper>\n        </Grid>\n      </Grid>\n      <Paper style={{ margin: '0.1em', padding: '0.1em' }}>\n        <Grid container justify=\"space-between\">\n          {[1, 2, 3, 4, 5, 6, 7, 8, 9, 0].map(n => (\n            <Grid item xs={4} key={n} style={{ textAlign: 'center' }}>\n              <Button\n                variant={'contained'}\n                className={classes.button}\n                onClick={handleNumberPressed(n, setNumber)}>\n                {n}\n              </Button>\n            </Grid>\n          ))}\n          <Grid item xs={4} className={classes.buttonWrapper}>\n            <Button\n              variant={'contained'}\n              className={classes.button}\n              onClick={handleCLR(setNumber)}>\n              CLR\n            </Button>\n          </Grid>\n          <Grid item xs={4} className={classes.buttonWrapper}>\n            <Button\n              variant={'contained'}\n              className={classes.button}\n              onClick={handleOK(setNumber, setAnswer)}\n              buttonRef={ref}>\n              OK\n            </Button>\n          </Grid>\n        </Grid>\n      </Paper>\n    </>\n  );\n}\n\nexport default withStyles(styles)(NumPad);\n"],"sourceRoot":""}